{
  "button": {
    "default": [
      {
        "identifier": "className",
        "type": "string"
      },
      {
        "identifier": "disabled",
        "type": "boolean",
        "default": "false"
      },
      {
        "identifier": "size",
        "type": "ButtonSize"
      },
      {
        "identifier": "btnType",
        "type": "ButtonType",
        "default": "ButtonType.Default"
      },
      {
        "identifier": "href",
        "type": "string"
      },
      {
        "identifier": "block",
        "type": "boolean",
        "default": "false"
      },
      {
        "identifier": "activeClassName",
        "type": "string"
      },
      {
        "identifier": "style",
        "type": "object & CSSProperties"
      },
      {
        "identifier": "form",
        "type": "string"
      },
      {
        "identifier": "formAction",
        "type": "string"
      },
      {
        "identifier": "formEncType",
        "type": "string"
      },
      {
        "identifier": "formMethod",
        "type": "string"
      },
      {
        "identifier": "formNoValidate",
        "type": "boolean"
      },
      {
        "identifier": "formTarget",
        "type": "string"
      },
      {
        "identifier": "name",
        "type": "string"
      },
      {
        "identifier": "type",
        "type": "\"submit\" | \"reset\" | \"button\""
      },
      {
        "identifier": "value",
        "type": "string | number | readonly string[]"
      },
      {
        "identifier": "defaultChecked",
        "type": "boolean"
      },
      {
        "identifier": "defaultValue",
        "type": "string | number | readonly string[]"
      },
      {
        "identifier": "suppressContentEditableWarning",
        "type": "boolean"
      },
      {
        "identifier": "suppressHydrationWarning",
        "type": "boolean"
      },
      {
        "identifier": "accessKey",
        "type": "string"
      },
      {
        "identifier": "autoFocus",
        "type": "boolean"
      },
      {
        "identifier": "contentEditable",
        "type": "Booleanish | \"inherit\""
      },
      {
        "identifier": "contextMenu",
        "type": "string"
      },
      {
        "identifier": "dir",
        "type": "string"
      },
      {
        "identifier": "draggable",
        "type": "Booleanish"
      },
      {
        "identifier": "hidden",
        "type": "boolean"
      },
      {
        "identifier": "id",
        "type": "string"
      },
      {
        "identifier": "lang",
        "type": "string"
      },
      {
        "identifier": "nonce",
        "type": "string"
      },
      {
        "identifier": "placeholder",
        "type": "string"
      },
      {
        "identifier": "slot",
        "type": "string"
      },
      {
        "identifier": "spellCheck",
        "type": "Booleanish"
      },
      {
        "identifier": "tabIndex",
        "type": "number"
      },
      {
        "identifier": "title",
        "type": "string"
      },
      {
        "identifier": "translate",
        "type": "\"yes\" | \"no\""
      },
      {
        "identifier": "radioGroup",
        "type": "string"
      },
      {
        "identifier": "role",
        "type": "AriaRole"
      },
      {
        "identifier": "about",
        "type": "string"
      },
      {
        "identifier": "content",
        "type": "string"
      },
      {
        "identifier": "datatype",
        "type": "string"
      },
      {
        "identifier": "inlist",
        "type": "any"
      },
      {
        "identifier": "prefix",
        "type": "string"
      },
      {
        "identifier": "property",
        "type": "string"
      },
      {
        "identifier": "rel",
        "type": "string"
      },
      {
        "identifier": "resource",
        "type": "string"
      },
      {
        "identifier": "rev",
        "type": "string"
      },
      {
        "identifier": "typeof",
        "type": "string"
      },
      {
        "identifier": "vocab",
        "type": "string"
      },
      {
        "identifier": "autoCapitalize",
        "type": "string"
      },
      {
        "identifier": "autoCorrect",
        "type": "string"
      },
      {
        "identifier": "autoSave",
        "type": "string"
      },
      {
        "identifier": "color",
        "type": "string"
      },
      {
        "identifier": "itemProp",
        "type": "string"
      },
      {
        "identifier": "itemScope",
        "type": "boolean"
      },
      {
        "identifier": "itemType",
        "type": "string"
      },
      {
        "identifier": "itemID",
        "type": "string"
      },
      {
        "identifier": "itemRef",
        "type": "string"
      },
      {
        "identifier": "results",
        "type": "number"
      },
      {
        "identifier": "security",
        "type": "string"
      },
      {
        "identifier": "unselectable",
        "type": "\"on\" | \"off\""
      },
      {
        "identifier": "inputMode",
        "description": "Hints at the type of data that might be entered by the user while editing the element or its contents\n@see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute",
        "type": "\"none\" | \"search\" | \"text\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\""
      },
      {
        "identifier": "is",
        "description": "Specify that a standard HTML element should behave like a defined custom built-in element\n@see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is",
        "type": "string"
      },
      {
        "identifier": "aria-activedescendant",
        "description": "Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.",
        "type": "string"
      },
      {
        "identifier": "aria-atomic",
        "description": "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-autocomplete",
        "description": "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\npresented if they are made.",
        "type": "\"list\" | \"none\" | \"inline\" | \"both\""
      },
      {
        "identifier": "aria-busy",
        "description": "Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-checked",
        "description": "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets.\n@see aria-pressed\n@see aria-selected.",
        "type": "boolean | \"true\" | \"false\" | \"mixed\""
      },
      {
        "identifier": "aria-colcount",
        "description": "Defines the total number of columns in a table, grid, or treegrid.\n@see aria-colindex.",
        "type": "number"
      },
      {
        "identifier": "aria-colindex",
        "description": "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\n@see aria-colcount\n@see aria-colspan.",
        "type": "number"
      },
      {
        "identifier": "aria-colspan",
        "description": "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\n@see aria-colindex\n@see aria-rowspan.",
        "type": "number"
      },
      {
        "identifier": "aria-controls",
        "description": "Identifies the element (or elements) whose contents or presence are controlled by the current element.\n@see aria-owns.",
        "type": "string"
      },
      {
        "identifier": "aria-current",
        "description": "Indicates the element that represents the current item within a container or set of related elements.",
        "type": "boolean | \"true\" | \"false\" | \"page\" | \"step\" | \"location\" | \"date\" | \"time\""
      },
      {
        "identifier": "aria-describedby",
        "description": "Identifies the element (or elements) that describes the object.\n@see aria-labelledby",
        "type": "string"
      },
      {
        "identifier": "aria-details",
        "description": "Identifies the element that provides a detailed, extended description for the object.\n@see aria-describedby.",
        "type": "string"
      },
      {
        "identifier": "aria-disabled",
        "description": "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\n@see aria-hidden\n@see aria-readonly.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-dropeffect",
        "description": "Indicates what functions can be performed when a dragged object is released on the drop target.\n@deprecated in ARIA 1.1",
        "type": "\"link\" | \"none\" | \"copy\" | \"execute\" | \"move\" | \"popup\""
      },
      {
        "identifier": "aria-errormessage",
        "description": "Identifies the element that provides an error message for the object.\n@see aria-invalid\n@see aria-describedby.",
        "type": "string"
      },
      {
        "identifier": "aria-expanded",
        "description": "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-flowto",
        "description": "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\nallows assistive technology to override the general default of reading in document source order.",
        "type": "string"
      },
      {
        "identifier": "aria-grabbed",
        "description": "Indicates an element's \"grabbed\" state in a drag-and-drop operation.\n@deprecated in ARIA 1.1",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-haspopup",
        "description": "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.",
        "type": "boolean | \"true\" | \"false\" | \"dialog\" | \"grid\" | \"listbox\" | \"menu\" | \"tree\""
      },
      {
        "identifier": "aria-hidden",
        "description": "Indicates whether the element is exposed to an accessibility API.\n@see aria-disabled.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-invalid",
        "description": "Indicates the entered value does not conform to the format expected by the application.\n@see aria-errormessage.",
        "type": "boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\""
      },
      {
        "identifier": "aria-keyshortcuts",
        "description": "Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.",
        "type": "string"
      },
      {
        "identifier": "aria-label",
        "description": "Defines a string value that labels the current element.\n@see aria-labelledby.",
        "type": "string"
      },
      {
        "identifier": "aria-labelledby",
        "description": "Identifies the element (or elements) that labels the current element.\n@see aria-describedby.",
        "type": "string"
      },
      {
        "identifier": "aria-level",
        "description": "Defines the hierarchical level of an element within a structure.",
        "type": "number"
      },
      {
        "identifier": "aria-live",
        "description": "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.",
        "type": "\"off\" | \"assertive\" | \"polite\""
      },
      {
        "identifier": "aria-modal",
        "description": "Indicates whether an element is modal when displayed.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-multiline",
        "description": "Indicates whether a text box accepts multiple lines of input or only a single line.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-multiselectable",
        "description": "Indicates that the user may select more than one item from the current selectable descendants.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-orientation",
        "description": "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.",
        "type": "\"horizontal\" | \"vertical\""
      },
      {
        "identifier": "aria-owns",
        "description": "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\nbetween DOM elements where the DOM hierarchy cannot be used to represent the relationship.\n@see aria-controls.",
        "type": "string"
      },
      {
        "identifier": "aria-placeholder",
        "description": "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\nA hint could be a sample value or a brief description of the expected format.",
        "type": "string"
      },
      {
        "identifier": "aria-posinset",
        "description": "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n@see aria-setsize.",
        "type": "number"
      },
      {
        "identifier": "aria-pressed",
        "description": "Indicates the current \"pressed\" state of toggle buttons.\n@see aria-checked\n@see aria-selected.",
        "type": "boolean | \"true\" | \"false\" | \"mixed\""
      },
      {
        "identifier": "aria-readonly",
        "description": "Indicates that the element is not editable, but is otherwise operable.\n@see aria-disabled.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-relevant",
        "description": "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\n@see aria-atomic.",
        "type": "\"text\" | \"additions\" | \"additions removals\" | \"additions text\" | \"all\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\""
      },
      {
        "identifier": "aria-required",
        "description": "Indicates that user input is required on the element before a form may be submitted.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-roledescription",
        "description": "Defines a human-readable, author-localized description for the role of an element.",
        "type": "string"
      },
      {
        "identifier": "aria-rowcount",
        "description": "Defines the total number of rows in a table, grid, or treegrid.\n@see aria-rowindex.",
        "type": "number"
      },
      {
        "identifier": "aria-rowindex",
        "description": "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.\n@see aria-rowcount\n@see aria-rowspan.",
        "type": "number"
      },
      {
        "identifier": "aria-rowspan",
        "description": "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\n@see aria-rowindex\n@see aria-colspan.",
        "type": "number"
      },
      {
        "identifier": "aria-selected",
        "description": "Indicates the current \"selected\" state of various widgets.\n@see aria-checked\n@see aria-pressed.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-setsize",
        "description": "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n@see aria-posinset.",
        "type": "number"
      },
      {
        "identifier": "aria-sort",
        "description": "Indicates if items in a table or grid are sorted in ascending or descending order.",
        "type": "\"none\" | \"ascending\" | \"descending\" | \"other\""
      },
      {
        "identifier": "aria-valuemax",
        "description": "Defines the maximum allowed value for a range widget.",
        "type": "number"
      },
      {
        "identifier": "aria-valuemin",
        "description": "Defines the minimum allowed value for a range widget.",
        "type": "number"
      },
      {
        "identifier": "aria-valuenow",
        "description": "Defines the current value for a range widget.\n@see aria-valuetext.",
        "type": "number"
      },
      {
        "identifier": "aria-valuetext",
        "description": "Defines the human readable text alternative of aria-valuenow for a range widget.",
        "type": "string"
      },
      {
        "identifier": "dangerouslySetInnerHTML",
        "type": "{ __html: string | TrustedHTML; }"
      },
      {
        "identifier": "onCopy",
        "type": "ClipboardEventHandler<HTMLElement>"
      },
      {
        "identifier": "onCopyCapture",
        "type": "ClipboardEventHandler<HTMLElement>"
      },
      {
        "identifier": "onCut",
        "type": "ClipboardEventHandler<HTMLElement>"
      },
      {
        "identifier": "onCutCapture",
        "type": "ClipboardEventHandler<HTMLElement>"
      },
      {
        "identifier": "onPaste",
        "type": "ClipboardEventHandler<HTMLElement>"
      },
      {
        "identifier": "onPasteCapture",
        "type": "ClipboardEventHandler<HTMLElement>"
      },
      {
        "identifier": "onCompositionEnd",
        "type": "CompositionEventHandler<HTMLElement>"
      },
      {
        "identifier": "onCompositionEndCapture",
        "type": "CompositionEventHandler<HTMLElement>"
      },
      {
        "identifier": "onCompositionStart",
        "type": "CompositionEventHandler<HTMLElement>"
      },
      {
        "identifier": "onCompositionStartCapture",
        "type": "CompositionEventHandler<HTMLElement>"
      },
      {
        "identifier": "onCompositionUpdate",
        "type": "CompositionEventHandler<HTMLElement>"
      },
      {
        "identifier": "onCompositionUpdateCapture",
        "type": "CompositionEventHandler<HTMLElement>"
      },
      {
        "identifier": "onFocus",
        "type": "FocusEventHandler<HTMLElement>"
      },
      {
        "identifier": "onFocusCapture",
        "type": "FocusEventHandler<HTMLElement>"
      },
      {
        "identifier": "onBlur",
        "type": "FocusEventHandler<HTMLElement>"
      },
      {
        "identifier": "onBlurCapture",
        "type": "FocusEventHandler<HTMLElement>"
      },
      {
        "identifier": "onChange",
        "type": "FormEventHandler<HTMLElement>"
      },
      {
        "identifier": "onChangeCapture",
        "type": "FormEventHandler<HTMLElement>"
      },
      {
        "identifier": "onBeforeInput",
        "type": "FormEventHandler<HTMLElement>"
      },
      {
        "identifier": "onBeforeInputCapture",
        "type": "FormEventHandler<HTMLElement>"
      },
      {
        "identifier": "onInput",
        "type": "FormEventHandler<HTMLElement>"
      },
      {
        "identifier": "onInputCapture",
        "type": "FormEventHandler<HTMLElement>"
      },
      {
        "identifier": "onReset",
        "type": "FormEventHandler<HTMLElement>"
      },
      {
        "identifier": "onResetCapture",
        "type": "FormEventHandler<HTMLElement>"
      },
      {
        "identifier": "onSubmit",
        "type": "FormEventHandler<HTMLElement>"
      },
      {
        "identifier": "onSubmitCapture",
        "type": "FormEventHandler<HTMLElement>"
      },
      {
        "identifier": "onInvalid",
        "type": "FormEventHandler<HTMLElement>"
      },
      {
        "identifier": "onInvalidCapture",
        "type": "FormEventHandler<HTMLElement>"
      },
      {
        "identifier": "onLoad",
        "type": "ReactEventHandler<HTMLElement>"
      },
      {
        "identifier": "onLoadCapture",
        "type": "ReactEventHandler<HTMLElement>"
      },
      {
        "identifier": "onError",
        "type": "ReactEventHandler<HTMLElement>"
      },
      {
        "identifier": "onErrorCapture",
        "type": "ReactEventHandler<HTMLElement>"
      },
      {
        "identifier": "onKeyDown",
        "type": "KeyboardEventHandler<HTMLElement>"
      },
      {
        "identifier": "onKeyDownCapture",
        "type": "KeyboardEventHandler<HTMLElement>"
      },
      {
        "identifier": "onKeyPress",
        "description": "@deprecated",
        "type": "KeyboardEventHandler<HTMLElement>"
      },
      {
        "identifier": "onKeyPressCapture",
        "description": "@deprecated",
        "type": "KeyboardEventHandler<HTMLElement>"
      },
      {
        "identifier": "onKeyUp",
        "type": "KeyboardEventHandler<HTMLElement>"
      },
      {
        "identifier": "onKeyUpCapture",
        "type": "KeyboardEventHandler<HTMLElement>"
      },
      {
        "identifier": "onAbort",
        "type": "ReactEventHandler<HTMLElement>"
      },
      {
        "identifier": "onAbortCapture",
        "type": "ReactEventHandler<HTMLElement>"
      },
      {
        "identifier": "onCanPlay",
        "type": "ReactEventHandler<HTMLElement>"
      },
      {
        "identifier": "onCanPlayCapture",
        "type": "ReactEventHandler<HTMLElement>"
      },
      {
        "identifier": "onCanPlayThrough",
        "type": "ReactEventHandler<HTMLElement>"
      },
      {
        "identifier": "onCanPlayThroughCapture",
        "type": "ReactEventHandler<HTMLElement>"
      },
      {
        "identifier": "onDurationChange",
        "type": "ReactEventHandler<HTMLElement>"
      },
      {
        "identifier": "onDurationChangeCapture",
        "type": "ReactEventHandler<HTMLElement>"
      },
      {
        "identifier": "onEmptied",
        "type": "ReactEventHandler<HTMLElement>"
      },
      {
        "identifier": "onEmptiedCapture",
        "type": "ReactEventHandler<HTMLElement>"
      },
      {
        "identifier": "onEncrypted",
        "type": "ReactEventHandler<HTMLElement>"
      },
      {
        "identifier": "onEncryptedCapture",
        "type": "ReactEventHandler<HTMLElement>"
      },
      {
        "identifier": "onEnded",
        "type": "ReactEventHandler<HTMLElement>"
      },
      {
        "identifier": "onEndedCapture",
        "type": "ReactEventHandler<HTMLElement>"
      },
      {
        "identifier": "onLoadedData",
        "type": "ReactEventHandler<HTMLElement>"
      },
      {
        "identifier": "onLoadedDataCapture",
        "type": "ReactEventHandler<HTMLElement>"
      },
      {
        "identifier": "onLoadedMetadata",
        "type": "ReactEventHandler<HTMLElement>"
      },
      {
        "identifier": "onLoadedMetadataCapture",
        "type": "ReactEventHandler<HTMLElement>"
      },
      {
        "identifier": "onLoadStart",
        "type": "ReactEventHandler<HTMLElement>"
      },
      {
        "identifier": "onLoadStartCapture",
        "type": "ReactEventHandler<HTMLElement>"
      },
      {
        "identifier": "onPause",
        "type": "ReactEventHandler<HTMLElement>"
      },
      {
        "identifier": "onPauseCapture",
        "type": "ReactEventHandler<HTMLElement>"
      },
      {
        "identifier": "onPlay",
        "type": "ReactEventHandler<HTMLElement>"
      },
      {
        "identifier": "onPlayCapture",
        "type": "ReactEventHandler<HTMLElement>"
      },
      {
        "identifier": "onPlaying",
        "type": "ReactEventHandler<HTMLElement>"
      },
      {
        "identifier": "onPlayingCapture",
        "type": "ReactEventHandler<HTMLElement>"
      },
      {
        "identifier": "onProgress",
        "type": "ReactEventHandler<HTMLElement>"
      },
      {
        "identifier": "onProgressCapture",
        "type": "ReactEventHandler<HTMLElement>"
      },
      {
        "identifier": "onRateChange",
        "type": "ReactEventHandler<HTMLElement>"
      },
      {
        "identifier": "onRateChangeCapture",
        "type": "ReactEventHandler<HTMLElement>"
      },
      {
        "identifier": "onSeeked",
        "type": "ReactEventHandler<HTMLElement>"
      },
      {
        "identifier": "onSeekedCapture",
        "type": "ReactEventHandler<HTMLElement>"
      },
      {
        "identifier": "onSeeking",
        "type": "ReactEventHandler<HTMLElement>"
      },
      {
        "identifier": "onSeekingCapture",
        "type": "ReactEventHandler<HTMLElement>"
      },
      {
        "identifier": "onStalled",
        "type": "ReactEventHandler<HTMLElement>"
      },
      {
        "identifier": "onStalledCapture",
        "type": "ReactEventHandler<HTMLElement>"
      },
      {
        "identifier": "onSuspend",
        "type": "ReactEventHandler<HTMLElement>"
      },
      {
        "identifier": "onSuspendCapture",
        "type": "ReactEventHandler<HTMLElement>"
      },
      {
        "identifier": "onTimeUpdate",
        "type": "ReactEventHandler<HTMLElement>"
      },
      {
        "identifier": "onTimeUpdateCapture",
        "type": "ReactEventHandler<HTMLElement>"
      },
      {
        "identifier": "onVolumeChange",
        "type": "ReactEventHandler<HTMLElement>"
      },
      {
        "identifier": "onVolumeChangeCapture",
        "type": "ReactEventHandler<HTMLElement>"
      },
      {
        "identifier": "onWaiting",
        "type": "ReactEventHandler<HTMLElement>"
      },
      {
        "identifier": "onWaitingCapture",
        "type": "ReactEventHandler<HTMLElement>"
      },
      {
        "identifier": "onAuxClick",
        "type": "MouseEventHandler<HTMLElement>"
      },
      {
        "identifier": "onAuxClickCapture",
        "type": "MouseEventHandler<HTMLElement>"
      },
      {
        "identifier": "onClick",
        "type": "MouseEventHandler<HTMLElement>"
      },
      {
        "identifier": "onClickCapture",
        "type": "MouseEventHandler<HTMLElement>"
      },
      {
        "identifier": "onContextMenu",
        "type": "MouseEventHandler<HTMLElement>"
      },
      {
        "identifier": "onContextMenuCapture",
        "type": "MouseEventHandler<HTMLElement>"
      },
      {
        "identifier": "onDoubleClick",
        "type": "MouseEventHandler<HTMLElement>"
      },
      {
        "identifier": "onDoubleClickCapture",
        "type": "MouseEventHandler<HTMLElement>"
      },
      {
        "identifier": "onDrag",
        "type": "DragEventHandler<HTMLElement>"
      },
      {
        "identifier": "onDragCapture",
        "type": "DragEventHandler<HTMLElement>"
      },
      {
        "identifier": "onDragEnd",
        "type": "DragEventHandler<HTMLElement>"
      },
      {
        "identifier": "onDragEndCapture",
        "type": "DragEventHandler<HTMLElement>"
      },
      {
        "identifier": "onDragEnter",
        "type": "DragEventHandler<HTMLElement>"
      },
      {
        "identifier": "onDragEnterCapture",
        "type": "DragEventHandler<HTMLElement>"
      },
      {
        "identifier": "onDragExit",
        "type": "DragEventHandler<HTMLElement>"
      },
      {
        "identifier": "onDragExitCapture",
        "type": "DragEventHandler<HTMLElement>"
      },
      {
        "identifier": "onDragLeave",
        "type": "DragEventHandler<HTMLElement>"
      },
      {
        "identifier": "onDragLeaveCapture",
        "type": "DragEventHandler<HTMLElement>"
      },
      {
        "identifier": "onDragOver",
        "type": "DragEventHandler<HTMLElement>"
      },
      {
        "identifier": "onDragOverCapture",
        "type": "DragEventHandler<HTMLElement>"
      },
      {
        "identifier": "onDragStart",
        "type": "DragEventHandler<HTMLElement>"
      },
      {
        "identifier": "onDragStartCapture",
        "type": "DragEventHandler<HTMLElement>"
      },
      {
        "identifier": "onDrop",
        "type": "DragEventHandler<HTMLElement>"
      },
      {
        "identifier": "onDropCapture",
        "type": "DragEventHandler<HTMLElement>"
      },
      {
        "identifier": "onMouseDown",
        "type": "MouseEventHandler<HTMLElement>"
      },
      {
        "identifier": "onMouseDownCapture",
        "type": "MouseEventHandler<HTMLElement>"
      },
      {
        "identifier": "onMouseEnter",
        "type": "MouseEventHandler<HTMLElement>"
      },
      {
        "identifier": "onMouseLeave",
        "type": "MouseEventHandler<HTMLElement>"
      },
      {
        "identifier": "onMouseMove",
        "type": "MouseEventHandler<HTMLElement>"
      },
      {
        "identifier": "onMouseMoveCapture",
        "type": "MouseEventHandler<HTMLElement>"
      },
      {
        "identifier": "onMouseOut",
        "type": "MouseEventHandler<HTMLElement>"
      },
      {
        "identifier": "onMouseOutCapture",
        "type": "MouseEventHandler<HTMLElement>"
      },
      {
        "identifier": "onMouseOver",
        "type": "MouseEventHandler<HTMLElement>"
      },
      {
        "identifier": "onMouseOverCapture",
        "type": "MouseEventHandler<HTMLElement>"
      },
      {
        "identifier": "onMouseUp",
        "type": "MouseEventHandler<HTMLElement>"
      },
      {
        "identifier": "onMouseUpCapture",
        "type": "MouseEventHandler<HTMLElement>"
      },
      {
        "identifier": "onSelect",
        "type": "ReactEventHandler<HTMLElement>"
      },
      {
        "identifier": "onSelectCapture",
        "type": "ReactEventHandler<HTMLElement>"
      },
      {
        "identifier": "onTouchCancel",
        "type": "TouchEventHandler<HTMLElement>"
      },
      {
        "identifier": "onTouchCancelCapture",
        "type": "TouchEventHandler<HTMLElement>"
      },
      {
        "identifier": "onTouchEnd",
        "type": "TouchEventHandler<HTMLElement>"
      },
      {
        "identifier": "onTouchEndCapture",
        "type": "TouchEventHandler<HTMLElement>"
      },
      {
        "identifier": "onTouchMove",
        "type": "TouchEventHandler<HTMLElement>"
      },
      {
        "identifier": "onTouchMoveCapture",
        "type": "TouchEventHandler<HTMLElement>"
      },
      {
        "identifier": "onTouchStart",
        "type": "TouchEventHandler<HTMLElement>"
      },
      {
        "identifier": "onTouchStartCapture",
        "type": "TouchEventHandler<HTMLElement>"
      },
      {
        "identifier": "onPointerDown",
        "type": "PointerEventHandler<HTMLElement>"
      },
      {
        "identifier": "onPointerDownCapture",
        "type": "PointerEventHandler<HTMLElement>"
      },
      {
        "identifier": "onPointerMove",
        "type": "PointerEventHandler<HTMLElement>"
      },
      {
        "identifier": "onPointerMoveCapture",
        "type": "PointerEventHandler<HTMLElement>"
      },
      {
        "identifier": "onPointerUp",
        "type": "PointerEventHandler<HTMLElement>"
      },
      {
        "identifier": "onPointerUpCapture",
        "type": "PointerEventHandler<HTMLElement>"
      },
      {
        "identifier": "onPointerCancel",
        "type": "PointerEventHandler<HTMLElement>"
      },
      {
        "identifier": "onPointerCancelCapture",
        "type": "PointerEventHandler<HTMLElement>"
      },
      {
        "identifier": "onPointerEnter",
        "type": "PointerEventHandler<HTMLElement>"
      },
      {
        "identifier": "onPointerEnterCapture",
        "description": "@deprecated This event handler was always ignored by React. It was added by mistake to the types.",
        "type": "PointerEventHandler<HTMLElement>"
      },
      {
        "identifier": "onPointerLeave",
        "type": "PointerEventHandler<HTMLElement>"
      },
      {
        "identifier": "onPointerLeaveCapture",
        "description": "@deprecated This event handler was always ignored by React. It was added by mistake to the types.",
        "type": "PointerEventHandler<HTMLElement>"
      },
      {
        "identifier": "onPointerOver",
        "type": "PointerEventHandler<HTMLElement>"
      },
      {
        "identifier": "onPointerOverCapture",
        "type": "PointerEventHandler<HTMLElement>"
      },
      {
        "identifier": "onPointerOut",
        "type": "PointerEventHandler<HTMLElement>"
      },
      {
        "identifier": "onPointerOutCapture",
        "type": "PointerEventHandler<HTMLElement>"
      },
      {
        "identifier": "onGotPointerCapture",
        "type": "PointerEventHandler<HTMLElement>"
      },
      {
        "identifier": "onGotPointerCaptureCapture",
        "type": "PointerEventHandler<HTMLElement>"
      },
      {
        "identifier": "onLostPointerCapture",
        "type": "PointerEventHandler<HTMLElement>"
      },
      {
        "identifier": "onLostPointerCaptureCapture",
        "type": "PointerEventHandler<HTMLElement>"
      },
      {
        "identifier": "onScroll",
        "type": "UIEventHandler<HTMLElement>"
      },
      {
        "identifier": "onScrollCapture",
        "type": "UIEventHandler<HTMLElement>"
      },
      {
        "identifier": "onWheel",
        "type": "WheelEventHandler<HTMLElement>"
      },
      {
        "identifier": "onWheelCapture",
        "type": "WheelEventHandler<HTMLElement>"
      },
      {
        "identifier": "onAnimationStart",
        "type": "AnimationEventHandler<HTMLElement>"
      },
      {
        "identifier": "onAnimationStartCapture",
        "type": "AnimationEventHandler<HTMLElement>"
      },
      {
        "identifier": "onAnimationEnd",
        "type": "AnimationEventHandler<HTMLElement>"
      },
      {
        "identifier": "onAnimationEndCapture",
        "type": "AnimationEventHandler<HTMLElement>"
      },
      {
        "identifier": "onAnimationIteration",
        "type": "AnimationEventHandler<HTMLElement>"
      },
      {
        "identifier": "onAnimationIterationCapture",
        "type": "AnimationEventHandler<HTMLElement>"
      },
      {
        "identifier": "onTransitionEnd",
        "type": "TransitionEventHandler<HTMLElement>"
      },
      {
        "identifier": "onTransitionEndCapture",
        "type": "TransitionEventHandler<HTMLElement>"
      },
      {
        "identifier": "download",
        "type": "any"
      },
      {
        "identifier": "hrefLang",
        "type": "string"
      },
      {
        "identifier": "media",
        "type": "string"
      },
      {
        "identifier": "ping",
        "type": "string"
      },
      {
        "identifier": "target",
        "type": "HTMLAttributeAnchorTarget"
      },
      {
        "identifier": "referrerPolicy",
        "type": "HTMLAttributeReferrerPolicy"
      }
    ]
  },
  "image": {
    "default": [
      {
        "identifier": "src",
        "description": "图片链接",
        "type": "string",
        "required": true
      },
      {
        "identifier": "fit",
        "description": "图片填充模式 'contain' | 'cover' | 'fill' | 'none' | 'scale-down'",
        "type": "ImageFit",
        "default": "fill"
      },
      {
        "identifier": "alt",
        "description": "替代文本",
        "type": "string"
      },
      {
        "identifier": "width",
        "description": "宽度，默认单位为px",
        "type": "string",
        "default": "90px"
      },
      {
        "identifier": "height",
        "description": "高度，默认单位为px",
        "type": "string",
        "default": "90px"
      },
      {
        "identifier": "radius",
        "description": "圆角大小，默认单位为px",
        "type": "number"
      },
      {
        "identifier": "round",
        "description": "是否显示为圆形",
        "type": "boolean",
        "default": "false"
      },
      {
        "identifier": "onLoad",
        "description": "图片加载成功回调",
        "type": "(event?: FormEvent<Element>) => void"
      },
      {
        "identifier": "onError",
        "description": "图片加载失败回调",
        "type": "(event?: FormEvent<Element>) => void"
      },
      {
        "identifier": "showLoading",
        "description": "是否展示loading",
        "type": "boolean",
        "default": "false"
      },
      {
        "identifier": "showError",
        "description": "是否展示加载失败",
        "type": "boolean"
      },
      {
        "identifier": "lazyLoad",
        "description": "是否开启懒加载",
        "type": "boolean"
      }
    ]
  },
  "loading": {
    "default": [
      {
        "identifier": "color",
        "description": "icon 颜色",
        "type": "string",
        "default": "黑色"
      },
      {
        "identifier": "type",
        "description": "图标类型 接受 'spinner' | 'circle' 两种类型的图标",
        "type": "IconType",
        "default": "spinner"
      },
      {
        "identifier": "size",
        "description": "图标大小 接受 'xs' | 'lg' | 'sm' 三种类型",
        "type": "SizeProp",
        "default": "sm"
      },
      {
        "identifier": "textSize",
        "description": "字体大小单位 px",
        "type": "string",
        "default": "12"
      },
      {
        "identifier": "textColor",
        "description": "字体颜色",
        "type": "string",
        "default": "黑色"
      },
      {
        "identifier": "className",
        "description": "传入类名",
        "type": "string"
      }
    ]
  },
  "mask": {
    "default": [
      {
        "identifier": "visible",
        "description": "是否显示遮罩层",
        "type": "boolean",
        "required": true
      },
      {
        "identifier": "onClick",
        "description": "点击遮罩",
        "type": "() => void"
      }
    ]
  },
  "badge": {
    "default": [
      {
        "identifier": "color",
        "type": "string",
        "required": true
      },
      {
        "identifier": "dot",
        "type": "boolean",
        "required": true
      },
      {
        "identifier": "max",
        "type": "number",
        "required": true
      },
      {
        "identifier": "content",
        "type": "number | ReactElement<any, string | JSXElementConstructor<any>>",
        "required": true
      },
      {
        "identifier": "size",
        "type": "SizeProps",
        "required": true
      },
      {
        "identifier": "fixed",
        "type": "boolean",
        "required": true
      },
      {
        "identifier": "style",
        "type": "CSSProperties",
        "required": true
      }
    ]
  },
  "progress": {
    "default": [
      {
        "identifier": "percent",
        "description": "进度条百分比 0~100",
        "type": "number",
        "required": true
      },
      {
        "identifier": "fixed",
        "description": "设置为 true 将吸附到顶部",
        "type": "boolean"
      },
      {
        "identifier": "unfilled",
        "description": "是否显示填充轨道默认填充",
        "type": "boolean"
      },
      {
        "identifier": "color",
        "description": "进度条颜色",
        "type": "string"
      },
      {
        "identifier": "trackColor",
        "description": "轨道颜色",
        "type": "string"
      },
      {
        "identifier": "showPivot",
        "description": "是否展示进度文字",
        "type": "boolean",
        "default": "false"
      },
      {
        "identifier": "pivoteText",
        "description": "pivote 文字",
        "type": "string"
      },
      {
        "identifier": "textColor",
        "description": "进度文字颜色",
        "type": "string"
      },
      {
        "identifier": "pivotColor",
        "description": "进度文字背景颜色",
        "type": "string"
      },
      {
        "identifier": "inactive",
        "description": "是否置灰",
        "type": "boolean"
      },
      {
        "identifier": "wrapStyle",
        "description": "进度条包裹层样式",
        "type": "CSSProperties"
      },
      {
        "identifier": "percentStyle",
        "description": "进度条样式",
        "type": "CSSProperties"
      }
    ]
  },
  "modal": {
    "default": [
      {
        "identifier": "title",
        "description": "标题",
        "type": "ReactNode"
      },
      {
        "identifier": "visible",
        "description": "是否显示",
        "type": "boolean"
      },
      {
        "identifier": "maskClosable",
        "description": "点击蒙层是否允许关闭",
        "type": "boolean"
      },
      {
        "identifier": "footer",
        "description": "底部内容",
        "type": "Action<CSSProperties>[]"
      },
      {
        "identifier": "onClose",
        "description": "关闭回调函数",
        "type": "() => void"
      },
      {
        "identifier": "message",
        "description": "提示信息",
        "type": "ReactNode"
      }
    ]
  },
  "input": {
    "default": [
      {
        "identifier": "className",
        "type": "string"
      },
      {
        "identifier": "type",
        "type": "\"number\" | \"text\" | \"phone\" | \"password\""
      },
      {
        "identifier": "value",
        "type": "string"
      },
      {
        "identifier": "placeholder",
        "type": "string",
        "required": true
      },
      {
        "identifier": "label",
        "type": "ReactNode"
      },
      {
        "identifier": "required",
        "type": "boolean"
      },
      {
        "identifier": "disabled",
        "type": "boolean"
      },
      {
        "identifier": "readonly",
        "type": "boolean"
      },
      {
        "identifier": "clearble",
        "type": "boolean"
      },
      {
        "identifier": "maxLength",
        "type": "number"
      },
      {
        "identifier": "defaultValue",
        "type": "string"
      },
      {
        "identifier": "onChange",
        "type": "InputEventHandler"
      },
      {
        "identifier": "onFocus",
        "type": "InputEventHandler"
      },
      {
        "identifier": "onBlur",
        "type": "InputEventHandler"
      },
      {
        "identifier": "onClear",
        "type": "InputEventHandler"
      }
    ]
  },
  "switch": {
    "default": [
      {
        "identifier": "value",
        "type": "boolean",
        "required": true
      },
      {
        "identifier": "disabled",
        "type": "boolean",
        "required": true
      },
      {
        "identifier": "size",
        "type": "\"lg\" | \"sm\"",
        "required": true
      },
      {
        "identifier": "activeColor",
        "type": "string",
        "required": true
      },
      {
        "identifier": "inactiveColor",
        "type": "string",
        "required": true
      },
      {
        "identifier": "onClick",
        "type": "(value: boolean) => void",
        "required": true
      }
    ]
  },
  "uploader": {
    "default": [
      {
        "identifier": "action",
        "description": "上传地址 如果不传则组件提供文件选择功能",
        "type": "string"
      },
      {
        "identifier": "beforeUpload",
        "description": "上传前执行回调函数",
        "type": "(file: File) => boolean"
      },
      {
        "identifier": "onChange",
        "description": "文件改变回调函数",
        "type": "(file: File, files: UploaderFileListItem[], response: any) => void"
      },
      {
        "identifier": "onError",
        "description": "上传失败回调函数",
        "type": "lifeCycleCallBack"
      },
      {
        "identifier": "onRemove",
        "description": "删除文件回调函数",
        "type": "(file: UploaderFileListItem) => void"
      },
      {
        "identifier": "onOversize",
        "description": "文件大小超过限制回调函数",
        "type": "(itmes: UploaderFileListItem[]) => void"
      },
      {
        "identifier": "beforeDelete",
        "description": "删除文件操作前回调函数,可以返回一个 Boolean | Promise",
        "type": "Interceptor"
      },
      {
        "identifier": "multiple",
        "description": "是否可多选",
        "type": "boolean"
      },
      {
        "identifier": "fileList",
        "description": "已上传的文件列表",
        "type": "any[]"
      },
      {
        "identifier": "accept",
        "description": "允许上传的文件类型",
        "type": "string",
        "default": "image/*"
      },
      {
        "identifier": "maxSize",
        "description": "文件大小限制，单位为 byte",
        "type": "UploaderMaxSize",
        "default": "image/*"
      },
      {
        "identifier": "customHeaer",
        "description": "自定义请求头",
        "type": "object"
      },
      {
        "identifier": "disabled",
        "description": "是否禁用文件上传",
        "type": "boolean"
      },
      {
        "identifier": "previewSize",
        "description": "预览图和上传区域的尺寸，默认单位为 px",
        "type": "string"
      },
      {
        "identifier": "imageFit",
        "description": "预览图裁剪模式，可选值见 Image 组件",
        "type": "ImageFit"
      },
      {
        "identifier": "maxCount",
        "description": "文件上传数量限制",
        "type": "number"
      },
      {
        "identifier": "deletable",
        "description": "是否展示删除按钮",
        "type": "boolean"
      },
      {
        "identifier": "name",
        "description": "标识符，可以在回调函数的第二项参数中获取",
        "type": "string"
      },
      {
        "identifier": "customFileName",
        "description": "自定义 formData 参数名称",
        "type": "string"
      }
    ]
  },
  "breadcrmb": {
    "default": [
      {
        "identifier": "separator",
        "description": "分隔符",
        "type": "string",
        "default": "/"
      },
      {
        "identifier": "inactiveColor",
        "description": "未激活字体颜色",
        "type": "string"
      },
      {
        "identifier": "activeColor",
        "description": "激活字体颜色",
        "type": "string"
      },
      {
        "identifier": "disabled",
        "description": "禁用状态",
        "type": "boolean",
        "default": "false"
      },
      {
        "identifier": "onSelect",
        "description": "选择事件",
        "type": "(selectIndex: number) => void"
      }
    ]
  },
  "tree-select": {
    "default": [
      {
        "identifier": "index",
        "description": "左侧选择的index",
        "type": "number",
        "default": "0"
      },
      {
        "identifier": "activeId",
        "description": "右侧选择的 id",
        "type": "string | number | (string | number)[]",
        "default": "[]"
      },
      {
        "identifier": "height",
        "description": "高度，默认单位为px",
        "type": "CSSProperties",
        "default": "300px"
      },
      {
        "identifier": "data",
        "description": "分类显示所需的数据",
        "type": "TreeSelectProps[]",
        "default": "[]"
      },
      {
        "identifier": "inactiveColor",
        "description": "置灰颜色",
        "type": "string"
      },
      {
        "identifier": "activeColor",
        "description": "激活颜色",
        "type": "string"
      },
      {
        "identifier": "multiple",
        "description": "是否设置多选",
        "type": "boolean",
        "required": true
      },
      {
        "identifier": "onChangeTree",
        "description": "左侧选项点击回调函数",
        "type": "(item: TreeSidebarProps, index: number) => void"
      },
      {
        "identifier": "onChangeTreeItem",
        "description": "右侧选项点击回调函数",
        "type": "(item: TreeSidebarProps, activeId: string | number | (string | number)[]) => void"
      }
    ]
  }
}